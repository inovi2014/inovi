<?php
    namespace Thin;
    use ErrorException;
    use \Thin\Exception\Frame;
    class errorController extends Controller
    {
        private $exception, $frames;

        public function init()
        {
            $this->exception = request()->getException();
        }

        public function preDispatch()
        {

        }

        public function indexAction()
        {
            $this->view->frames = $this->getFrames();
            $this->view->name = explode('\\', get_class($this->exception));
            $this->view->message = $this->exception->getMessage();
            $this->view->hasFrames = !!count($this->view->frames);
            $this->view->tables = array(
                'Server/Request Data'   => $_SERVER,
                'GET Data'              => $_GET,
                'POST Data'             => $_POST,
                'Files'                 => $_FILES,
                'Cookies'               => $_COOKIE,
                'Session'               => isset($_SESSION) ? $_SESSION:  array(),
                'Environment Variables' => $_ENV
            );
            if (!headers_sent())    header("HTTP/1.0 500 Error");
            $this->view->title = 'Erreur';
        }

        /**
         * @return Exception
         */
        public function getException()
        {
            return $this->exception;
        }

        /**
         * @return string
         */
        public function getExceptionName()
        {
            return get_class($this->exception);
        }

        /**
         * @return string
         */
        public function getExceptionMessage()
        {
            return $this->exception->getMessage();
        }

        /**
         * Returns an iterator for the inspected exception's
         * frames.
         * @return FrameCollection
         */
        public function getFrames()
        {
            if($this->frames === null) {
                $frames = $this->exception->getTrace();

                // If we're handling an ErrorException thrown by Whoops,
                // get rid of the last frame, which matches the handleError method,
                // and do not add the current exception to trace. We ensure that
                // the next frame does have a filename / linenumber, though.
                if(($this->exception instanceof ErrorException || $this->exception instanceof Object) && empty($frames[1]['line'])) {
                    $frames = array($this->getFrameFromError($this->exception));
                } else {
                    $firstFrame = $this->getFrameFromException($this->exception);
                    array_unshift($frames, $firstFrame);
                }
                $collection = array();

                if (count($frames)) {
                    foreach ($frames as $frame) {
                        array_push($collection, new Frame($frame));
                    }
                }

                $this->frames = new Database\Collection($collection);
            }

            return $this->frames;
        }

        /**
         * Given an error, generates an array in the format
         * generated by ErrorException
         * @param ErrorException $exception
         * @return array
         */
        protected function getFrameFromError(ErrorException $exception)
        {
            return array(
                'file'  => $exception->getFile(),
                'line'  => $exception->getLine(),
                'class' => null,
                'args'  => array()
            );
        }

        /**
         * Given an exception, generates an array in the format
         * generated by Exception::getTrace()
         * @param Exception $exception
         * @return array
         */
        protected function getFrameFromException($exception)
        {
            return array(
                'file'  => $exception->getFile(),
                'line'  => $exception->getLine(),
                'class' => get_class($exception),
                'args'  => array(
                    $exception->getMessage()
                )
            );
        }

        public function postDispatch()
        {

        }
    }
